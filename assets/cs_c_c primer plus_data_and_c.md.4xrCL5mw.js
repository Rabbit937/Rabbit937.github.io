import{j as a,b as l,c as i,aa as e}from"./chunks/framework.Ct6KyvCt.js";const f=JSON.parse('{"title":"数据和C","description":"","frontmatter":{"tag":["C语言"]},"headers":[],"relativePath":"cs/c/c primer plus/data_and_c.md","filePath":"cs/c/c primer plus/data_and_c.md","lastUpdated":1711962169000}'),t={name:"cs/c/c primer plus/data_and_c.md"},r=e('<h1 id="数据和c" tabindex="-1">数据和C <a class="header-anchor" href="#数据和c" aria-label="Permalink to &quot;数据和C&quot;">​</a></h1><h2 id="本章内容" tabindex="-1">本章内容 <a class="header-anchor" href="#本章内容" aria-label="Permalink to &quot;本章内容&quot;">​</a></h2><ul><li>关键字 -- int、short、long、unsigned、char、float、double、_Bool、_Complex、 _Imaginary;</li><li>运算符 -- sizeof();</li><li>函数 -- scanf();</li><li>整数类型和浮点数类型的区别;</li><li>如何书写整型和浮点型常熟，如何声明这些类型的变量;</li><li>如何使用printf()和scanf()函数读写同类型的值;</li></ul><h3 id="变量与常量数据" tabindex="-1">变量与常量数据 <a class="header-anchor" href="#变量与常量数据" aria-label="Permalink to &quot;变量与常量数据&quot;">​</a></h3><ul><li>在整个程序的运行过程中没有变化，这些称为常量（constant）。其他数据类型在程序运行期间可能会改变或被赋值，这些称为变量（variable）</li></ul><h3 id="数据-数据类型关键字" tabindex="-1">数据：数据类型关键字 <a class="header-anchor" href="#数据-数据类型关键字" aria-label="Permalink to &quot;数据：数据类型关键字&quot;">​</a></h3><ul><li><p>位、字节和字是描述计算机数据单元或存储单元的术语。这里主要指存储单元。</p><ul><li>最小的存储单元是位（bit），可以存储0或1（或者说，位用于设置“开”或“关”）。</li><li>字节（byte）是常用的计算机存储单位。对于几乎所有的机器，1字节均为8位。</li><li>字（word）是设计计算机时给定的自然存储单位。对于8位的微型计算机（如，最初的苹果机），1个字长只有8位。从那以后，个人计算机字长增至16位、32位，直到目前的64位。计算机的字长越大，其数据转移越快，允许的内存访问也更多。</li></ul></li><li><p>整数和浮点数</p><ul><li>计算机把浮点数分成小数部分和指数部分来表示，而且分开存储这两部分。</li></ul></li></ul><h3 id="c语言基本数据类型" tabindex="-1">C语言基本数据类型 <a class="header-anchor" href="#c语言基本数据类型" aria-label="Permalink to &quot;C语言基本数据类型&quot;">​</a></h3><ul><li>无论把数字写成16、020或0x10，存储该数的方式都相同，因为计算机内部都以二进制进行编码。</li><li>通常，系统存储一个浮点数要占用32位。其中8位用于表示指数的值和符号，剩下24位用于表示非指数部分（也叫作尾数或有效数）及其符号。</li><li>double类型和float类型的最小取值范围相同，但至少必须能表示10位有效数字。一般情况下，double占用64位而不是32位。</li><li>浮点值的上溢和下溢：当计算导致数字过大，超过当前类型能表达的范围时，就会发生上溢。</li><li>C语言提供了大量的数值类型，目的是为程序员提供方便。那以整数类型为例，C认为一种整型不够，提供了有符号、无符号，以及大小不同的整型，以满足不同程序的需求。</li></ul>',9),o=[r];function c(n,s,d,_,u,h){return l(),i("div",null,o)}const m=a(t,[["render",c]]);export{f as __pageData,m as default};
